@using Newtonsoft.Json
@model IEnumerable<MVCATM.Models.Transaction>

<h2>Statement</h2>
<div  data-bind="visible: hasTransactions" >
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.checkingAccount.AccountNumber)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Amount)
                </th>
                <th>
                    <strong>Transaction Time</strong>
                </th>
                <th>
                    <strong>Transaction Status</strong>
                </th>

            </tr>
        </thead>
        <tbody data-bind="foreach:currentTransactions">

            <tr>
                <td data-bind="text:checkingAccount.AccountNumber"></td>
                <td data-bind="text:formattedPrice(Amount)"></td>
                <td data-bind="text:moment(TransactionStatus.TransactionTime).format('LLL')"></td>
                <td data-bind="visible:!TransactionStatus.ProcessStatus">Success</td>
                <td data-bind="visible:TransactionStatus.ProcessStatus">Failure</td>
            </tr>

        </tbody>

        <tfoot>
            <tr>
                <td colspan="4">
                    <i class="fas fa-arrow-left" style="cursor:pointer" data-bind="click:previousPage,visible:currentPage()>1"></i>
                    <span data-bind="text:currentPage"></span>
                    <i class="fas fa-arrow-right" style="cursor:pointer" data-bind="click:nextPage,visible:currentPage() < lastPage"></i>
                </td>
            </tr>
        </tfoot>
    </table>
</div>
<div data-bind="visible: !hasTransactions">
    No transactions exists.
</div>
@section scripts{
    <script src="~/Scripts/knockout-3.4.2.js"></script>
    <script>
        function formattedPrice(amount) {
            var price = amount.toFixed(2);
            return price;
        }
        function StatementViewModel() {
            var self = this;
            self.transactions = @Html.Raw(JsonConvert.SerializeObject(Model, new JsonSerializerSettings { ReferenceLoopHandling=ReferenceLoopHandling.Ignore}));
            self.pageSize = 5;
            self.currentPage = ko.observable(1);
            self.lastPage = Math.ceil(self.transactions.length / self.pageSize);
            self.hasTransactions = (self.transactions.length > 0)?true:false;
            self.currentTransactions = ko.computed(function () {
            var startIndex = (self.currentPage() - 1) * self.pageSize;
            var endIndex = startIndex + self.pageSize;
            return self.transactions.slice(startIndex, endIndex);
            });
                self.nextPage = function () {
                    self.currentPage(self.currentPage() + 1);
                };
                self.previousPage = function () {
                    self.currentPage(self.currentPage() - 1);
                };
            }

            ko.applyBindings(new StatementViewModel());
    </script>
}